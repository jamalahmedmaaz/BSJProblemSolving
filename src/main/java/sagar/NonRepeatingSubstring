class NonRepeatingSubstring {
  public int lengthOfLongestSubstring(String s) {
    if (s.length() < 2) {
      return s.length();
    }
    int maxLength = 0;
    int currLength = 0;
    int start=0;  
    Map<Character, Integer> map = new HashMap<>();
    for (int i = 0; i < s.length(); i++) {
      if (map.containsKey(s.charAt(i))) {
        maxLength = Math.max(currLength, maxLength);
        char c = s.charAt(i);
        currLength = currLength - (map.get(c) - start);
        start=map.get(c) + 1;
       Set<Character> keySet=  map.entrySet().stream().filter(entry -> entry.getValue() <= map.get(c)).map(entry->entry.getKey()).collect(Collectors.toSet());
        map.keySet().removeAll(keySet);
          map.put(c,i);
      } else {
        map.put(s.charAt(i), i);
        currLength++;
      }
    }
    return Math.max(maxLength,currLength);
  }
}
